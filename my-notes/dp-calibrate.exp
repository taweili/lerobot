#!/usr/bin/expect -f

# Load Tk for GUI
package require Tk

# Create main window
set w [toplevel .calibrate]
wm title $w "SA100 Arm Calibration"
wm attributes $w -topmost 1

# Create status text widget
set status [text $w.status -width 50 -height 10 -wrap word]
$status insert end "Calibration Status:\n\n"
$status configure -state disabled

# Create buttons for each arm type
set buttons [dict create \
    "right leader" [button $w.rleader -text "右后" -state disabled] \
    "left leader" [button $w.lleader -text "左后" -state disabled] \
    "right follower" [button $w.rfollower -text "右前" -state disabled] \
    "left follower" [button $w.lfollower -text "左前" -state disabled] \
]

# Create position buttons
set pos_buttons [dict create \
    "middle" [button $w.middle -text "Middle" -state disabled] \
    "zero" [button $w.zero -text "Zero" -state disabled] \
    "rotated" [button $w.rotated -text "Rotated" -state disabled] \
    "rest" [button $w.rest -text "Rest" -state disabled] \
]

# Grid layout configuration
grid columnconfigure $w 0 -weight 1

grid $status -row 0 -column 0 -sticky "nsew" -padx 5 -pady 5

# Arm buttons
grid [dict get $buttons "right leader"] -row 1 -column 0 -sticky "nsew" -padx 5 -pady 5
grid [dict get $buttons "left leader"] -row 2 -column 0 -sticky "nsew" -padx 5 -pady 5
grid [dict get $buttons "right follower"] -row 3 -column 0 -sticky "nsew" -padx 5 -pady 5
grid [dict get $buttons "left follower"] -row 4 -column 0 -sticky "nsew" -padx 5 -pady 5

# Divider between arm and position buttons
ttk::separator $w.divider -orient horizontal
grid $w.divider -row 5 -column 0 -sticky "ew" -pady 5

# Position buttons
grid [dict get $pos_buttons "middle"] -row 6 -column 0 -sticky "nsew" -padx 5 -pady 5
grid [dict get $pos_buttons "zero"] -row 7 -column 0 -sticky "nsew" -padx 5 -pady 5
grid [dict get $pos_buttons "rotated"] -row 8 -column 0 -sticky "nsew" -padx 5 -pady 5
grid [dict get $pos_buttons "rest"] -row 9 -column 0 -sticky "nsew" -padx 5 -pady 5

# Update status procedure
proc update_status {msg} {
    global w status
    $status configure -state normal
    $status insert end "$msg\n"
    $status see end
    $status configure -state disabled
    update
}

# Update button state procedure
proc update_button {arm state} {
    global buttons
    set btn [dict get $buttons $arm]
    if {$state == "active"} {
        $btn configure -state normal -background yellow
        update_status "Calibrating $arm..."
    } else {
        $btn configure -state disabled -background [ttk::style lookup TButton -background]
    }
}

# Expect script to launch and interact with sa100-calibrate.sh
set timeout -1

# Get the directory of this script
set script_dir [file dirname [file normalize [info script]]]

# Get command line arguments to pass through
set args [lrange $argv 0 end]

# Spawn the calibration script with full path
spawn $script_dir/sa100-calibrate.sh {*}$args

# Handle various cases
expect {
    # Handle potential error messages
    "Unknown argument:" {
        puts "\nError: $expect_out(buffer)"
        exit 1
    }
    
    # Handle specific arm messages
    -re "sa100 (right|left) (leader|follower)" {
        set arm "$expect_out(1,string) $expect_out(2,string)"
        puts "\nArm detected: $arm"
        update_button $arm active
        exp_continue
    }
    
    # Handle Python errors
    -re "(Error|Exception):.*" {
        puts "\nError encountered: $expect_out(buffer)"
        exit 1
    }
    
    # Handle calibration progress
    -re "(Calibrating|Processing).*" {
        puts "\nProgress: $expect_out(buffer)"
        exp_continue
    }
    
    # Handle any user prompts
    -re ".*\\?.*" {
        send -- "\r"
        exp_continue
    }
    
    # Wait for completion
    eof {
        puts "\nCalibration completed successfully"
        # Reset all buttons
        dict for {arm btn} $buttons {
            update_button $arm inactive
        }
    }
}

# Exit with the same code as the spawned process
catch wait result
exit [lindex $result 3]