#!/usr/bin/expect -f
# Camera Setup GUI using Tcl/Tk with Expect - Automatic Version

package require Tk

# Global variables
set camera_devices {/dev/video2 /dev/video4 /dev/video6}
set camera_labels {右边 左边 中间}
set camera_states {0 0 0} ;# 0=not connected, 1=connected
set current_step 0
set check_interval 1000 ;# ms between automatic checks
set max_wait_time 30000 ;# 30s timeout

# Main window
wm title . "摄像头设置向导"
wm geometry . 800x600
grid [ttk::frame .main -padding "20 20 20 20"] -column 0 -row 0 -sticky nwes
grid columnconfigure . 0 -weight 1
grid rowconfigure . 0 -weight 1

# Step 1: Initial instructions (unchanged)
proc show_initial_step {} {
    global current_step
    
    destroy_widgets
    
    set f [ttk::frame .main.step1]
    pack $f -fill both -expand 1
    
    ttk::label $f.title -text "摄像头设置 - 第1步/共3步" -font {Helvetica  24}
    pack $f.title -pady 10
    
    ttk::label $f.instructions -text "请先拔掉所有三个摄像头\n\n这将确保正确的设备检测顺序" \
        -font {Helvetica  10} -justify center
    pack $f.instructions -pady 20
    
    ttk::button $f.next -text "我已拔掉所有摄像头" -command {
        set current_step 1
        show_driver_reset
    }
    pack $f.next -pady 20
}

# Step 2: Driver reset (unchanged)
proc show_driver_reset {} {
    global current_step
    
    destroy_widgets
    
    set f [ttk::frame .main.step2]
    pack $f -fill both -expand 1
    
    ttk::label $f.title -text "摄像头设置 - 第2步/共3步" -font {Helvetica  24}
    pack $f.title -pady 10
    
    ttk::label $f.status -text "正在重置USB驱动..." -font {Helvetica  24}
    pack $f.status -pady 10
    
    ttk::progressbar $f.progress -orient horizontal -mode indeterminate
    pack $f.progress -pady 20 -fill x -padx 50
    $f.progress start
    
    set ::progress_widget $f.progress
    set ::status_widget $f.status
    set ::step2_frame $f

    after 1000 {
        if {[catch {exec pkexec modprobe -r uvcvideo} err]} {
            $::progress_widget stop
            $::status_widget configure -text "Driver reset failed!" -foreground red
            tk_messageBox -icon error -title "Error" -message \
                "Failed to unload uvcvideo module:\n$err"
            return
        }
        
        after 5000 {
            if {[catch {exec pkexec modprobe uvcvideo} err]} {
                $::progress_widget stop
                $::status_widget configure -text "Driver reset failed!" -foreground red
                tk_messageBox -icon error -title "Error" -message \
                    "Failed to reload uvcvideo module:\n$err"
                return
            }
            
            $::progress_widget stop
            $::status_widget configure -text "驱动重置完成!"
            ttk::button $::step2_frame.next -text "继续连接摄像头" -command {
                set ::current_step 2
                show_camera_connection
            }
            pack $::step2_frame.next -pady 20
        }
    }
}

# Step 3: Automatic camera connection checking
proc show_camera_connection {} {
    global camera_labels camera_states check_interval max_wait_time
    
    destroy_widgets
    
    set f [ttk::frame .main.step3]
    pack $f -fill both -expand 1
    
    ttk::label $f.title -text "摄像头设置 - 第3步/共3步" -font {Helvetica  24}
    pack $f.title -pady 10
    
    ttk::label $f.instructions -text "请按以下顺序连接摄像头:" -font {Helvetica 24}
    pack $f.instructions -pady 10
    
    # Status indicators frame
    set status_frame [ttk::frame $f.status]
    pack $status_frame -pady 20
    
    # Create status labels
    for {set i 0} {$i < 3} {incr i} {
        ttk::label $status_frame.label$i -text [lindex $::camera_labels $i] -font {Helvetica 16}
        ttk::label $status_frame.status$i -text "等待连接..." -font {Helvetica 16}
        grid $status_frame.label$i -row $i -column 0 -sticky w -padx 10
        grid $status_frame.status$i -row $i -column 1 -sticky w -padx 10
    }
    
    # Start automatic checking
    set ::start_time [clock milliseconds]
    check_cameras_automatically
    
    # Restart button
    ttk::button $f.restart -text "重新开始" -command {
        set current_step 0
        show_initial_step
    }
    pack $f.restart -pady 20 -side bottom
}

proc check_cameras_automatically {} {
    global camera_devices camera_states check_interval max_wait_time
    
    set current_time [clock milliseconds]
    if {($current_time - $::start_time) > $max_wait_time} {
        tk_messageBox -icon warning -title "超时" -message "摄像头连接超时，请检查设备并重试"
        return
    }
    
    set all_connected 1
    for {set i 0} {$i < 3} {incr i} {
        # Only check next camera if previous ones are connected
        if {$i > 0 && [lindex $camera_states [expr {$i - 1}]] == 0} {
            set all_connected 0
            continue
        }
        
        set device [lindex $camera_devices $i]
        if {[file exists $device]} {
            if {[lindex $camera_states $i] == 0} {
                .main.step3.status.status$i configure -text "已连接" -foreground "#4CAF50"
                set ::camera_states [lreplace $::camera_states $i $i 1]
            }
        } else {
            if {[lindex $camera_states $i] == 1} {
                .main.step3.status.status$i configure -text "已断开" -foreground "#F44336"
                set ::camera_states [lreplace $::camera_states $i $i 0]
            }
            set all_connected 0
        }
    }
    
    if {$all_connected} {
        show_completion
    } else {
        after $check_interval check_cameras_automatically
    }
}

# Completion screen (unchanged)
proc show_completion {} {
    destroy_widgets
    
    set f [ttk::frame .main.complete]
    pack $f -fill both -expand 1
    
    ttk::label $f.title -text "设置完成!" -font {Helvetica 24}
    pack $f.title -pady 10
    
    ttk::label $f.message -text "所有摄像头已按正确顺序成功连接。" \
        -font {Helvetica 10} -justify center
    pack $f.message -pady 20
    
    ttk::button $f.finish -text "完成" -command {exit}
    pack $f.finish -pady 20
}

# Helper to clear current widgets (unchanged)
proc destroy_widgets {} {
    foreach child [winfo children .main] {
        destroy $child
    }
}

# Define styles
option add *font {Helvetica 14}
ttk::style configure TButton -padding 10
ttk::style configure Large.TButton -font {Helvetica 16} -padding 12
ttk::style configure Success.TLabel -foreground "#4CAF50"
ttk::style configure Error.TLabel -foreground "#F44336"

# Start the wizard
show_initial_step

# Run the application
vwait forever